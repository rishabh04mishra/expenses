{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactHooks\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  const [titleInput, setTitleInput] = useState(''); //   const [userInput, setUserInput] = useState({\n  //     inputTitle: \"\",\n  //     inputAmount: \"\",\n  //     inputDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {// setUserInput({\n    //   ...userInput,\n    //   inputTitle: event.target.value,\n    // });\n  }; //const [inputAmount, setinputAmount] = useState('');\n\n\n  const amountChangeHandler = event => {// setUserInput({\n    //   //setInputmount(event.target.value)//if you have different state  then this\n    //   ...userInput,\n    //   inputAmount: event.target.value,\n    // });\n    // if you want to use previous state while updating then use this\n    // setUserInput((prevState)=>{\n    //     return {...prevState,inputAmount:event.target.value}\n    // })\n  }; //const [inputDate, setinputDate] = useState('');\n\n\n  const dateChangeHandler = event => {\n    setUserInput({ ...userInput,\n      inputDate: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1.00\",\n          steps: \"1.00\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2021-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"tRq5LVmaVAcBZeP9C42zvI5hMkI=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["D:/ReactHooks/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","titleInput","setTitleInput","titleChangeHandler","event","amountChangeHandler","dateChangeHandler","setUserInput","userInput","inputDate","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC,EAAD,CAA5C,CADwB,CAE1B;AACA;AACA;AACA;AACA;;AACE,QAAMI,kBAAkB,GAAIC,KAAD,IAAW,CAEpC;AACA;AACA;AACA;AACD,GAND,CAPwB,CAcxB;;;AACA,QAAMC,mBAAmB,GAAID,KAAD,IAAW,CACrC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAED,GAZD,CAfwB,CA4BxB;;;AACA,QAAME,iBAAiB,GAAIF,KAAD,IAAW;AACnCG,IAAAA,YAAY,CAAC,EACX,GAAGC,SADQ;AAEXC,MAAAA,SAAS,EAAEL,KAAK,CAACM,MAAN,CAAaC;AAFb,KAAD,CAAZ;AAID,GALD;;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAER;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,GAAG,EAAC,MAFN;AAGE,UAAA,KAAK,EAAC,MAHR;AAIE,UAAA,QAAQ,EAAEE;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAcE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,GAAG,EAAC,YAFN;AAGE,UAAA,GAAG,EAAC,YAHN;AAIE,UAAA,QAAQ,EAAEC;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAyBE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAlED;;GAAMN,W;;KAAAA,W;AAoEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\nconst ExpenseForm = () => {\r\n  const [titleInput, setTitleInput] = useState('');\r\n//   const [userInput, setUserInput] = useState({\r\n//     inputTitle: \"\",\r\n//     inputAmount: \"\",\r\n//     inputDate: \"\",\r\n//   });\r\n  const titleChangeHandler = (event) => {\r\n      \r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   inputTitle: event.target.value,\r\n    // });\r\n  };\r\n  //const [inputAmount, setinputAmount] = useState('');\r\n  const amountChangeHandler = (event) => {\r\n    // setUserInput({\r\n    //   //setInputmount(event.target.value)//if you have different state  then this\r\n    //   ...userInput,\r\n    //   inputAmount: event.target.value,\r\n    // });\r\n\r\n    // if you want to use previous state while updating then use this\r\n    // setUserInput((prevState)=>{\r\n    //     return {...prevState,inputAmount:event.target.value}\r\n    // })\r\n\r\n  };\r\n  //const [inputDate, setinputDate] = useState('');\r\n  const dateChangeHandler = (event) => {\r\n    setUserInput({\r\n      ...userInput,\r\n      inputDate: event.target.value,\r\n    });\r\n  };\r\n  return (\r\n    <form>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"1.00\"\r\n            steps=\"1.00\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2021-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new_expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"]},"metadata":{},"sourceType":"module"}